/**
 * Configuration file for holding sheet formulas and queries.
 * This approach centralizes the sheet structure logic, making it
 * easier to manage, version, and deploy.
 */

const SHEET_SETUP_CONFIG = {
  /**
   * Defines the headers for each sheet. The order here determines the order
   * in which they will be created by the setup script.
   */
  HEADERS: {
    'Project Pipeline': [
      "Name", "SFID", "Slack Channel ID", "external_id", "import_batch_id",
      "Drive Folder URL", "Slack Team ID", "Slack Channel URL", "Project Status",
      "Permits", "Priority", "Probability", "pipeline_last_transfer_status",
      "Inspection Performed By", "Status (Last Valid)", "Source", "Assigned to",
      "Deadline", "ts_permits_approved", "ts_entered_permitting",
      "ts_added_to_upcoming", "ts_added_to_framing", "pipeline_last_transfer_ts",
      "last_validated_ts", "Deposit received", "Final payment received",
      "Final payment date", "Deposit received date", "Blocked since",
      "Override until", "ts_first_scheduled", "ts_marked_done",
      "opportunity_closed_date", "Permit application submitted",
      "Permit artifacts in Drive", "Change orders approved",
      "Equipment received in warehouse", "Site prep checklist complete",
      "Rough inspections passed", "Final inspection passed", "Duplicate SFID",
      "Override: Allow Advance", "Equipment", "Architect", "Revenue", "COGS",
      "last_upcoming_notified_ts", "last_framing_notified_ts",
      "last_block_notified_ts", "last_escalation_notified_ts", "Gross Margin %",
      "Week of (Monday)", "open_tasks_count", "overdue_tasks_count",
      "completed_tasks_count", "total_blocking_tasks",
      "completed_blocking_tasks", "task_progress_%", "can_advance_globally",
      "can_advance_to_Permitting", "can_advance_to_Scheduled",
      "can_advance_to_Inspections", "can_advance_to_Done",
      "Advance block reason", "last_edit_relative", "escalate_ready",
      "Month (Deadline)", "Created Month", "days_in_permitting",
      "days_to_schedule", "lead_time_days", "Revenue Weighted",
      "docs_required_but_missing", "aging_days_since_edit",
      "is_active_backlog", "blocked_hours", "staleness_flag"
    ],
    'Tasks': [
      "Name", "Project SFID", "Phase", "Status", "Type", "Assigned to",
      "Due Date", "Completed Date", "Effort hours", "Depends on",
      "Counts toward completion", "Completed %"
    ],
    'Ops Inbox': [
      "Name", "Source SFID", "Type", "Resolved", "Details", "Timestamp"
    ],
    'Upcoming': [], // Headers are generated by the QUERY formula
    'Framing': [], // Headers are generated by the QUERY formula
    'Dashboard': []
  },

  /**
   * ArrayFormulas to be applied to entire columns. They are written for row 2
   * and will be wrapped in a check to prevent applying to empty rows.
   * The key is the column header.
   */
  ARRAY_FORMULAS: {
    'Project Pipeline': {
      'Slack Channel URL': `=MAP(C2:C, G2:G, LAMBDA(id, team, IF(OR(id="", team=""), "", "https://app.slack.com/client/"&team&"/"&id)))`,
      'Gross Margin %': `=MAP(AS2:AS, AT2:AT, LAMBDA(rev, cogs, IF(rev="", "", IFERROR(ROUND((rev-cogs)/rev*100)))))`,
      'Week of (Monday)': `=MAP(R2:R, LAMBDA(deadline, IF(deadline="", "", deadline-WEEKDAY(deadline,2)+1)))`,
      'open_tasks_count': `=MAP(B2:B, LAMBDA(sfid, IF(sfid="", "", COUNTIFS(Tasks!B:B, sfid, Tasks!D:D, "<>Done"))))`,
      'overdue_tasks_count': `=MAP(B2:B, LAMBDA(sfid, IF(sfid="", "", COUNTIFS(Tasks!B:B, sfid, Tasks!D:D, "<>Done", Tasks!G:G, "<"&TODAY()))))`,
      'completed_tasks_count': `=MAP(B2:B, LAMBDA(sfid, IF(sfid="", "", COUNTIFS(Tasks!B:B, sfid, Tasks!D:D, "Done"))))`,
      'total_blocking_tasks': `=MAP(B2:B, LAMBDA(sfid, IF(sfid="", "", SUMIFS(Tasks!K:K, Tasks!B:B, sfid))))`,
      'completed_blocking_tasks': `=MAP(B2:B, LAMBDA(sfid, IF(sfid="", "", SUMIFS(Tasks!K:K, Tasks!B:B, sfid, Tasks!D:D, "Done"))))`,
      'task_progress_%': `=MAP(BD2:BD, BE2:BE, LAMBDA(total, completed, IF(total="", "", IF(total=0, 0, ROUND(100*completed/total)))))`,
      'can_advance_globally': `=MAP(R2:R, C2:C, BB2:BB, AO2:AO, LAMBDA(r, c, bb, ao, IF(r="", "", AND(NOT(ISBLANK(r)),NOT(ISBLANK(c)),bb=0,NOT(ao)))))`,
      'can_advance_to_Permitting': `=MAP(Y2:Y, AI2:AI, BF2:BF, LAMBDA(y, ai, bf, IF(y="", "", AND(y, ai, bf=100))))`,
      'can_advance_to_Scheduled': `=MAP(J2:J, AI2:AI, AS2:AS, L2:L, BF2:BF, LAMBDA(j, ai, as, l, bf, IF(j="", "", AND(j="Approved", ai, NOT(ISBLANK(as)), NOT(ISBLANK(l)), bf=100))))`,
      'can_advance_to_Inspections': `=MAP(AK2:AK, AL2:AL, AM2:AM, BF2:BF, LAMBDA(ak, al, am, bf, IF(ak="", "", AND(ak, al, am, bf=100))))`,
      'can_advance_to_Done': `=MAP(AN2:AN, Z2:Z, AI2:AI, BF2:BF, LAMBDA(an, z, ai, bf, IF(an="", "", AND(an, z, ai, bf=100))))`,
      'Advance block reason': `=MAP(A2:A, I2:I, BG2:BG, BH2:BH, BI2:BI, BJ2:BJ, BK2:BK, LAMBDA(a, i, bg, bh, bi, bj, bk, IF(a="", "", GET_ADVANCE_BLOCK_REASON(i, bg, bh, bi, bj, bk))))`,
      'escalate_ready': `=MAP(AC2:AC, LAMBDA(ac, IF(ac="", "", AND(NOT(ISBLANK(ac)),(NOW()-ac)>=1))))`,
      'Month (Deadline)': `=MAP(R2:R, LAMBDA(r, IF(r="", "", TEXT(r,"yyyy-mm"))))`,
      'Created Month': `=MAP(A2:A, LAMBDA(a, IF(a="","",TEXT(NOW(),"yyyy-mm"))))`,
      'days_in_permitting': `=MAP(S2:S, T2:T, LAMBDA(s, t, IF(OR(s="", t=""), "", s-t)))`,
      'days_to_schedule': `=MAP(S2:S, AE2:AE, LAMBDA(s, ae, IF(OR(s="", ae=""), "", ae-s)))`,
      'lead_time_days': `=MAP(AF2:AF, AG2:AG, LAMBDA(af, ag, IF(OR(af="", ag=""), "", af-ag)))`,
      'Revenue Weighted': `=MAP(AS2:AS, L2:L, LAMBDA(as, l, IF(OR(as="", l=""), "", as*VALUE(l)/100)))`,
      'docs_required_but_missing': `=MAP(J2:J, AI2:AI, LAMBDA(j, ai, IF(j="", "", AND(j="Approved",NOT(ai)))))`,
      'aging_days_since_edit': `=MAP(X2:X, LAMBDA(x, IF(x="", "", IFERROR(INT((NOW()-x)),0))))`,
      'is_active_backlog': `=MAP(I2:I, LAMBDA(i, IF(i="", "", OR(i="Scheduled",i="Permitting",i="Inspections"))))`,
      'blocked_hours': `=MAP(AC2:AC, LAMBDA(ac, IF(ac="", "", 24*(NOW()-ac))))`,
      'staleness_flag': `=MAP(BV2:BV, LAMBDA(bv, IF(bv="", "", bv>=7)))`
    },
    'Tasks': {
      'Counts toward completion': `=MAP(D2:D, LAMBDA(d, IF(d="", "", IF(OR(d="Waiting External",d="Skipped"),0,1))))`,
      'Completed %': `=MAP(D2:D, LAMBDA(d, IF(d="", "", IF(d="Done",100,0))))`
    }
  },

  STATIC_FORMULAS: {
    'Upcoming': {
      'A1': `=QUERY('Project Pipeline'!A:BY, "select A,B,R,I,AA,AR,J,AQ where J = 'Approved' order by R asc", 1)`
    },
    'Framing': {
      'A1': `=QUERY('Project Pipeline'!A:BY, "select A,B,R,AR,AQ where I = 'Permitting' order by R asc", 1)`
    },
    'Dashboard': {
        'A1': 'Active Backlog',
        'B1': `=COUNTIF('Project Pipeline'!BW:BW,TRUE)`,
        'A2': 'Blocked Projects',
        'B2': `=COUNTIF('Project Pipeline'!AC:AC,">0")`,
        'A3': 'Oldest Blocked Hours',
        'B3': `=IFERROR(MAX('Project Pipeline'!BX:BX),0)`,
        'A4': 'Upcoming (7d)',
        'B4': `=COUNTIFS('Project Pipeline'!J:J,"Approved",'Project Pipeline'!R:R,">="&TODAY(),'Project Pipeline'!R:R,"<="&TODAY()+7)`,
        'A5': 'Upcoming Revenue (7d)',
        'B5': `=SUMIFS('Project Pipeline'!BT:BT,'Project Pipeline'!J:J,"Approved",'Project Pipeline'!R:R,">="&TODAY(),'Project Pipeline'!R:R,"<="&TODAY()+7)`,
        'A6': 'Framing (7d)',
        'B6': `=COUNTIFS('Project Pipeline'!I:I,"Permitting",'Project Pipeline'!R:R,">="&TODAY(),'Project Pipeline'!R:R,"<="&TODAY()+7)`,
        'A7': 'Overdue Tasks',
        'B7': `=COUNTIFS(Tasks!D:D,"<>Done",Tasks!G:G,"<"&TODAY())`,
        'A8': 'Docs Required but Missing',
        'B8': `=COUNTIFS('Project Pipeline'!J:J,"Approved",'Project Pipeline'!AI:AI,FALSE)`,
        'A9': 'Duplicate SFIDs',
        'B9': `=COUNTIF('Project Pipeline'!AO:AO,TRUE)`,
        'A10': 'Wins This Week',
        'B10': `=COUNTIFS('Project Pipeline'!P:P,"Salesforce",'Project Pipeline'!BP:BP,TEXT(TODAY(),"yyyy-mm"))`,
        'A11': 'Forecast (This Month)',
        'B11': `=SUMIFS('Project Pipeline'!BT:BT,'Project Pipeline'!BO:BO,TEXT(TODAY(),"yyyy-mm"))`,
        'A12': 'Forecast (Next Month)',
        'B12': `=SUMIFS('Project Pipeline'!BT:BT,'Project Pipeline'!BO:BO,TEXT(EDATE(TODAY(),1),"yyyy-mm"))`,
        'D1': 'Forecast by Month',
        'D2': `=QUERY('Project Pipeline'!A:BY, "select BO, sum(AS), sum(BT) where BO is not null group by BO order by BO", 1)`,
        'D5': 'Permit Pipeline Status',
        'D6': `=QUERY('Project Pipeline'!A:BY, "select J, count(A) where J is not null group by J label count(A) 'Count'", 1)`,
        'D10': 'Avg Days in Permitting',
        'D11': `=QUERY('Project Pipeline'!A:BY, "select avg(BQ) where BQ is not null label avg(BQ) 'Avg days in permitting'", 1)`,
        'F1': 'Ready to Schedule',
        'F2': `=QUERY('Project Pipeline'!A:BY, "select A,B,AI,AS,L,BF where I='Permitting' and J='Approved' and AI = TRUE and BF = 100 and AS is not null and L is not null order by R asc", 1)`,
        'H1': 'Not Ready (Fix These)',
        'H2': `=QUERY('Project Pipeline'!A:BY, "select A,B,AI,AS,L,BF where I='Permitting' and J='Approved' and (AI = FALSE or BF < 100 or AS is null or L is null) order by R asc", 1)`,
        'J1': 'Execution Watchlist',
        'J2': `=QUERY('Project Pipeline'!A:BY, "select A,B,BL,BV,BB,Q,H where (BW = TRUE or AC is not null) order by AC desc, R asc", 1)`
    }
  }
};
